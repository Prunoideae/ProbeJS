plugins {
    id 'base'
    id 'java'
    id 'maven-publish'
    id 'net.neoforged.moddev' version "2.0.10-beta"
}

version = "${mod_version}"
group = project.maven_group

neoForge {
    version = project.neoforge_version
    accessTransformers {
        publish(project.file("src/main/resources/META-INF/accesstransformer.cfg"))
    }

    interfaceInjectionData {
        from(file("interfaces.json"))
    }

    mods {
        probejs {
            sourceSet sourceSets.main
        }
    }

    parchment {
        minecraftVersion = parchment_mc_version
        mappingsVersion = parchment_version
    }
}

repositories {
    mavenCentral()
    mavenLocal()

    maven {
        url "https://maven.neoforged.net/releases"
    }

    maven {
        url "https://maven.architectury.dev/"
    }

    maven {
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }

    maven {
        url "https://maven.blamejared.com"
        content {
            includeGroup "mezz.jei"
            includeGroup "net.darkhax.bookshelf"
            includeGroup "net.darkhax.gamestages"
        }
    }

    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }

    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
        content {
            includeGroup "dev.emi"
        }
    }
}

dependencies {
    api("dev.latvian.mods:rhino:$rhino_version") { transitive(false) }
    api("dev.latvian.mods:kubejs-neoforge:$kubejs_version")
    implementation ("dev.latvian.apps:tiny-java-server:$tiny_server_version")
    compileOnly("dev.architectury:architectury-neoforge:$architectury_version")

    jarJar implementation('com.github.javaparser:javaparser-symbol-solver-core:3.24.8')
    jarJar implementation('com.github.javaparser:javaparser-core:3.24.8')
    jarJar implementation("org.vineflower:vineflower:1.10.1")
}

compileJava {
    options.encoding = "UTF-8"
    options.release.set(21)
}

java {
    sourceCompatibility = targetCompatibility = '21'
    withSourcesJar()
}

processResources {
    def toReplace = [
            "version"         : project.version,
            "neoforge_version": neoforge_version,
            "kubejs_version"  : kubejs_version,
    ]

    println("[Process Resources] Replacing properties in resources: " + toReplace)

    inputs.properties toReplace
    filesMatching("META-INF/neoforge.mods.toml") {
        expand toReplace
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}